@using Microsoft.AspNetCore.Authorization

@page "/curvepoint/edit/{Id:int}"
@attribute [Authorize]
@inherits CurvePointUpdateBase

<h1>Update</h1>

@if (CurvePointModel == null)
{
    <p>Loading...</p>
}
else if (!OperationSuccess)
{
    <EditForm Model="CurvePointModel" OnValidSubmit="@HandleValidSubmit">

        <DataAnnotationsValidator />
        <ValidationSummary Model="@CurvePointModel" />

        <div class="form-row">
            <label>Account</label>
            <InputNumber @bind-Value="@CurvePointModel.CurveId" id="curveid" placeholder="Curve ID" class="form-control" />
            <ValidationMessage For="@(() => CurvePointModel.CurveId)" class="text-danger" />
        </div>

        <div class="form-row">
            <label>Type</label>
            <InputNumber @bind-Value="@CurvePointModel.Term" id="term" placeholder="Term" class="form-control" />
            <ValidationMessage For="@(() => CurvePointModel.Term)" class="text-danger" />
        </div>

        <div class="form-row">
            <label>Bid Quantity</label>
            <InputNumber @bind-Value="@CurvePointModel.Value" id="value" placeholder="Value" class="form-control" />
            <ValidationMessage For="@(() => CurvePointModel.Value)" class="text-danger" />
        </div>

        <button type="submit" class="btn btn-success btn-lg mt-4">Update</button>
        <button @onclick="@CancelEdit" class="btn btn-danger btn-lg mt-4">Cancel</button>

    </EditForm>
}
else
{
<p>The item was successfully updated.</p>

<button class="btn btn-info" @onclick="ReturnHome">Home</button>
}